from dataclasses import dataclass
from typing import TypeVar, Generic, Optional, Callable

T = TypeVar("T")

class IndexOutRangeException(Exception):
    pass

@dataclass
class Student:
    def __init__(self, fio, group, year, age, average_grade) -> None:
        self.fio = fio
        self.group = group
        self.year = year
        self.age = age
        self.average_grade = average_grade

    def __str__(self) -> str:
        return f"Student({self.fio},{self.group},{self.year},{self.age},{self.average_grade})"

@dataclass
class DoublyNode(Generic[T]):
    data: T
    next_ptr: Optional['DoublyNode[T]'] = None
    prev_ptr: Optional['DoublyNode[T]'] = None

class DoublyLinkedList(Generic[T]):

    def __init__(self) -> None:
        self._length: int = 0
        self._head: Optional[DoublyNode[T]] = None
        self._tail: Optional[DoublyNode[T]] = None

    def __str__(self) -> str:
        my_str: str = ""
        node = self._head
        while node is not None:
            my_str += str(node.data) + " "
            node = node.next_ptr
        return f"Current state: [{my_str}]"

    # .get_size()
    def __len__(self) -> int:
        return self._length

    # .insert()
    def __setitem__(self, index: int, data: T) -> None:
        ok: bool = self.check_range(index)
        if not ok:
            raise IndexOutRangeException("in setitem")

        if index == 0:
            self.push_head(data)
            return
        elif index == self._length - 1:
            self.push_tail(data)
            return

        node = self._head
        for i in range(0, index):
            node = node.next_ptr

        insert_node = DoublyNode[T](data)
        insert_node.next_ptr = node
        node.prev_ptr.next_ptr = insert_node
        insert_node.prev_ptr = node.prev_ptr
        node.prev_ptr = insert_node
        self._length += 1

    # .get()
    def __getitem__(self, index: int) -> T:
        ok: bool = self.check_range(index)
        if not ok:
            raise IndexOutRangeException("in getitem")

        if index == 0:
            return self._head.data
        if index == self._length - 1:
            return self._tail.data

        node = self._head
        for i in range(0, index):
            node = node.next_ptr
        return node.data

    #.remove()
    def __delitem__(self, index: int) -> bool:
        ok: bool = self.check_range(index)
        if not ok:
            return False

        if index == 0:
            node = self._head
            self._head = node.next_ptr
            del node
            self._length -= 1
            return True

        node = self._head
        for i in range(0, index - 1):
            node = node.next_ptr

        if index == self._length - 1:
            self._tail.prev_ptr = None
            self._tail = node
            self._tail.next_ptr = None
            self._length -= 1
            return True

        delete_node = node.next_ptr
        node.next_ptr = delete_node.next_ptr
        node.next_ptr.prev_ptr = delete_node.prev_ptr
        self._length -= 1
        del delete_node
        return True

    def is_empty(self) -> bool:
        return self._length == 0

    def check_range(self, index: int) -> bool:
        if index >= self._length or index < 0:
            return False
        return True

    def push_tail(self, data: T) -> None:
        node = DoublyNode[T](data, None)
        if self._length <= 0:
            self._head = node
            self._tail = node
            self._length += 1
            return

        #?????????? ? ????? ??????
        self._tail.next_ptr = node
        node.prev_ptr = self._tail
        self._tail = node
        self._length += 1

    def push_head(self, data: T) -> None:
        node = DoublyNode[T](data)
        if self._length <= 0:
            self._head = node
            self._tail = node
            self._length += 1
            return

        node.next_ptr = self._head
        self._head.prev_ptr = node
        self._head = node
        self._length += 1

    #?????????? ????????? (?? ???????????) ?? ???? «???????».
    def comb_sort_age(self) -> None:
        gap = len(self)
        shrink = 1.3
        swapped = True

        while gap > 1 or swapped:
            gap = max(1, int(gap / shrink))
            swapped = False
            i = 0
            while i + gap < len(self):
                if self[i].age > self[i + gap].age:
                    self[i].age, self[i + gap].age = self[i + gap].age, self[i].age
                    swapped = True
                i += 1

    # ????????, ???????????? ?? ?????? ?? ????????
    def is_sorted_by_age(self) -> bool:
        if self.is_empty():
            return True

        node = self._head
        while node and node.next_ptr:
            if node.data.age > node.next_ptr.data.age:
                return False
            node = node.next_ptr

        return True

    # ???????? ????? ?? ????????
    def linear_search_by_age(self, age: int) -> list:
        if not self.is_sorted_by_age():
            raise ValueError("List is not sorted by age. Please sort the list before searching.")

        found_students = []
        node = self._head
        while node is not None:
            if node.data.age == age:
                found_students.append(node.data)
            node = node.next_ptr

        return found_students